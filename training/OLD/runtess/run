#!/bin/bash

authfile=FIXME
project=FIXME

case $1 in
allpods)

kubectl get pods | awk '$3=="Running"{print $1}' | 
while read pod; do
    kubectl exec $pod -- "$@"
done

;;

monitor)

watch 'kubectl get pods; echo; kubectl get services'

;;

progress)

kubectl get pods | awk '$3=="Running"{print $1}' | 
while read pod; do
    kubectl exec $pod -- /bin/bash -c '
tif=$(find /work | fgrep .tif | wc -l)
png=$(find /work | fgrep .png | wc -l)
hocr=$(find /work | fgrep .hocr| wc -l)
echo $(hostname) tif $tif png $png hocr $hocr
'
done

;;

start)

gcloud config set project $project
gcloud config set compute/zone us-west1-a
gcloud container clusters create tess \
    --machine-type=n1-standard-8 \
    --scopes storage-rw,compute-rw \
    --num-nodes=64 --local-ssd-count 1
gcloud container clusters get-credentials tess


stop)

yes | gcloud container clusters delete tess

;;


submit)

kubectl create configmap auth --from-file=$authfile
cat volumes | 
while read vol; do
vname=$(echo $vol | sed 's/\./-/g')
cat <<"EOF" |
apiVersion: batch/v1
kind: Job
metadata:
  name: tess-__VNAME__
spec:
  template:
    spec:
      containers:
      - name: tess-__VNAME__
        image: gcr.io/$project/tess
        resources:
          limits:
            cpu: "7"
        command:
        - "bash"
        - "-c"
        - |
          die() {
            echo "$*" 1>&2
            exit 255
          }
          set -x
          date
          id
          df -h
          set -a
          HOME=/root
          USER=root
          cd /work
          mkdir /work/tmp
          mv /tmp /tmp.old
          ln -s /work/tmp /tmp
          basedir="$(pwd)"
          ls /auth
          gcloud config set project $project
          gcloud auth activate-service-account --key-file=/auth/$authfile
          vol=__VOLUME__
          echo === $vol
          result=cdip_$vol
          gsutil ls gs://lpr-cdip-tess/$result.tgz && exit 0
          rm -rf volume volume.archive outputs $result $result.tgz
          gsutil cp gs://lpr-cdip/images.$vol.cpio volume.archive
          mkdir volume && (cd volume && dtrx --one rename ../volume.archive)
          mkdir outputs
          echo "num_tiff $(find volume -name '*.tif' | wc -l)" | tee outputs/_num_tiff
          # find volume -name '*.tif' | parallel -j 2 gm convert {} +adjoin outputs/{/.}-%04d.png
          find volume -name '*.tif' | while read x; do gm convert $x +adjoin outputs/$(basename $x .tif)-%04d.png; done
          echo "num_png $(find outputs -name '*.png' | wc -l)" | tee outputs/_num_png
          cd $basedir/outputs
          find . -name '*.png' | parallel -j 4 tesseract --oem 1 {} {.} -l eng hocr
          cd $basedir
          echo "num_png $(find outputs -name '*.hocr' | wc -l)" | tee outputs/_num_hocr
          find volume outputs > outputs/_files
          mv outputs $result &&
          tar --sort=name -zcf $result.tgz $result &&
          gsutil cp $result.tgz gs://lpr-cdip-tess/$result.tgz &&
          rm -rf volume outputs $result $result.tgz
          date
          sleep 60
        volumeMounts:
        - name: auth
          mountPath: /auth
        - mountPath: "/work"
          name: "work"
      volumes:
      - name: auth
        configMap:
          name: auth
      - name: "work"
        hostPath:
          path: "/mnt/disks/ssd0"
      nodeSelector:
        cloud.google.com/gke-local-ssd: "true"
      restartPolicy: Never
  backoffLimit: 1
EOF
sed "s/__VOLUME__/$vol/g;s/__VNAME__/$vname/g" | tee LASTJOB |
kubectl apply -f -
done

;;

build)

set -e
docker build -t tess - < Dockerfile 
docker tag tess tmbdev/tess
docker push tmbdev/tess
docker tag tess gcr.io/$project/tess
# run: gcloud auth configure-docker
docker push gcr.io/$project/tess

;;

runjob)
microk8s.kubectl delete job tess
microk8s.kubectl delete -f job.yaml
sleep 3
microk8s.kubectl apply -f job.yaml
sleep 1
microk8s.kubectl get pods
sleep 15
microk8s.kubectl get pods
sleep 3
microk8s.kubectl log -f job/tess
;;

esac
