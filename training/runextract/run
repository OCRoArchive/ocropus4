#!/bin/bash

authfile=FIXME
project=FIXME
numnodes=64
zone=us-west1-a
machinetype=n1-standard-8

test -f config.sh && source config.sh

die() {
    echo "ERROR: $*" 1>&2
    exit 1
}

cmd_buildlocal() {  # build o4extract container locally
    set -e
    (cd ../.. && git archive HEAD --prefix=ocropus4/ -o training/runextract/docker/ocropus4.tar.gz)
    (cd docker && docker build -t o4extract .)
}

cmd_build() {  # build and push container
    cmd_buildlocal
    docker tag o4extract tmbdev/o4extract
    docker push tmbdev/o4extract
    docker tag o4extract gcr.io/$project/o4extract
    docker push gcr.io/$project/o4extract || 
        die "did you run: 'gcloud auth configure-docker'?"
    }

cmd_indocker() {  # run a command inside the docker container on local machine
    docker run -i --rm -v $(pwd):/work \
        -v "$authfile":/auth.json -w /work -t o4extract "$@"
}


cmd_gcestart() {  # start a GCE cluster
    test $authfile = FIXME && die "must define authfile= in config.sh"
    test $project = FIXME && die "must define project= in config.sh"
    gcloud config set project $project
    gcloud config set compute/zone $zone
    gcloud container clusters create o4extract \
        --machine-type=$machinetype \
        --scopes storage-rw,compute-rw \
        --num-nodes=$numnodes --local-ssd-count 1
            gcloud container clusters get-credentials o4extract
}

cmd_gcestop() {
    yes | gcloud container clusters delete o4extract
}


gcesubmit() {
    kubectl delete pods --all
    gsutil ls gs://nvdata-ocropus-tess/ |
    fgrep .tar | grep "${2:-.}" | sed 's!.*/!!' | cat -n | sed "${limit:-9999}q" |
    while read i n; do
        echo === $i $n
        sed "s/{{.Index}}/$i/g;s/{{.Item}}/$n/g" $1 > extract_$i.yml
        kubectl apply -f extract_$i.yml
        rm -f extract_$i.yml
        sleep 3
    done
}

cmd_gcemonitor() {
    watch 'kubectl get pods | awk "!/STATUS/{print \$3}" | sort | uniq -c'
}

cmd_extractwords() {
    gcesubmit extract-words.yml
    cmd_gcemonitor
}

cmd_extractlines() {
    gcesubmit extract-lines.yml
    cmd_gcemonitor
}

cmd_extractwseg() {
    gcesubmit extract-wseg.yml
    cmd_gcemonitor
}

cmd_extractlseg() {
    gcesubmit extract-lseg.yml
    cmd_gcemonitor
}

cmd_binarize() {
    gcesubmit binjob.yml 'gsub.*tar'
    cmd_gcemonitor
}

cmd_allpods() {  # execute command in all running pods
    kubectl get pods | awk '$3=="Running"{print $1}' | 
    while read pod; do
        kubectl exec $pod -- "$@"
    done
}

local_ocropus() {
    OCROPUS4=$(realpath ../..)
    export PYTHONPATH=$OCROPUS4
    . $OCROPUS4/venv/bin/activate
    $OCROPUS4/ocropus4 "$@"
}

cmd_uw3() {
    set -x
    src=gs/lpr-uw3/uw3-tess.tar
    extensions="page.jpg tess.html"
    if ! test -f uw3-word-000000.tar; then
        local_ocropus extract-rec hocr2rec --extensions "$extensions" $src --output temp.tar 
        tarp split -c 20000 temp.tar
        ls split-*.tar | rename 's/split/uw3-word/'
        rm -f temp.tar
    fi
    if ! test -f uw3-wseg-000000.tar; then
        local_ocropus extract-seg hocr2seg --extensions "$extensions" --check word $src --output temp.tar
        tarp split -c 2000 temp.tar
        ls split-*.tar | rename 's/split/uw3-wseg/'
        rm -f temp.tar
    fi
    if ! test -f uw3-line-000000.tar; then
        local_ocropus extract-rec hocr2rec --extensions "$extensions" --bounds 40,40,3000,400 --element ocr_line $src --output temp.tar
        tarp split -c 20000 temp.tar
        ls split-*.tar | rename 's/split/uw3-line/'
        rm -f temp.tar
    fi
    if ! test -f uw3-lseg-000000.tar; then
        local_ocropus extract-seg hocr2seg --extensions "$extensions" --check line --element ocr_line $src --output temp.tar
        tarp split -c 2000 temp.tar
        ls split-*.tar | rename 's/split/uw3-lseg/'
        rm -f temp.tar
    fi
}


cmd="${1:-help}"
shift

set -e

case $cmd in
    help)
        echo; echo available commands:; echo
        grep '^cmd_[_0-9a-z]*() {' "$0" | sed 's/cmd_//;s/\(.*\)() *{* *#* */\1 -- /'
        ;;
    *)
        set -e
        eval "cmd_$cmd" "$@"
        ;;
esac
