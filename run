#!/bin/bash

set -e

export OMP_NUM_THREADS=1

image=ocropus4
remimage=tmbdev/ocropus4

die() {
    echo "ERROR: $*"
    exit 1
}

cmd_clean() { # remove temporary files
    rm -f *-info.txt
    rm -f *.pth *.pth.tar
    rm -f *.log
}

cmd_cleanlogs() { # clean up log files
    source venv/bin/activate
    mkdir -p ./JUNK
    mv -v $(python3 -m ocrlib.slog findempty *.sqlite3) ./JUNK/.
}


cmd_download_uw3() {
    mkdir -p uw3
    gsutil -m rsync -r gs://lpr-uw3/* uw3/.
}


cmd_download() {
    mkdir -p trained
    gsutil -m rsync -r gs://ocropus4-trained/ ./models/
}


cmd_upload() {
    gsutil -m rsync -r ./models/ gs://ocropus4-trained/
}


cmd_info() {
    test -d venv || python3 -m venv venv
    source venv/bin/activate
    python3 -m ocrlib.slog info *.sqlite3
}

cmd_getbest() {
    test -d venv || python3 -m venv venv
    source venv/bin/activate
    python3 -m ocrlib.slog getbest "$@"
}

cmd_val2model() {
    test -d venv || python3 -m venv venv
    source venv/bin/activate
    python3 -m ocrlib.slog val2model $1
}

cmd_venv() { # set up a virtualenv
    test -d venv || python3 -m venv venv
    source venv/bin/activate
    pip3 install -U pip
    pip3 install numpy
    pip3 install --pre torch torchvision -f https://download.pytorch.org/whl/nightly/cu102/torch_nightly.html
    pip3 install -U -r requirements.txt
    pip3 install -U -r requirements.dev.txt
    # python3 -m bash_kernel.install
    pip3 install -U neovim
    pip3 install -U jupyterlab
    pip3 install -U pytest
    python3 -m bash_kernel.install
    if true; then
        pip3 install sos-python
        pip3 install sos-notebook
        pip3 install jupyterlab-sos
        pip3 install -e git://github.com/vatlab/transient-display-data#egg=transient-display-data
        python -m sos_notebook.install
        jupyter labextension install transient-display-data
        jupyter labextension install jupyterlab-sos
        pip3 install papermill
        pip3 install sos-papermill
    fi
    jupyter kernelspec list
}

cmd_testline() {
    set -e
    cmd_venv > venv.log
    source venv/bin/activate
    python3 $pdb -m ocrlib.ocroline train \
        uw3/words-simple-training.tar \
        --training-bs 5 \
        --ntrain 20000 \
        --epochs 1 \
        --test uw3/words-simple-test.tar \
        --mdef models/testline.py \
        --checkerr 0.05 \
        "$@"
}

cmd_testseg() {
    set -e
    cmd_venv > venv.log
    source venv/bin/activate
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    train=uw3/uw3-wordseg-markers-masked-patches-000000.tar
    test=uw3/uw3-wordseg-markers-masked-patches-000010.tar
    model=models/seglstm.py
    python3 -m ocrlib.ocroseg train $train --test $test --training-bs 2 \
        --mdef $model \
        --ntrain 2000 --ntest 100 --epochs 1 "$@"
}


###
# recognition
###

cmd_uw3dewline() {  # train on pre-dewarped lines (uw3-dew)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    python3 -m ocrlib.ocroline train uw3/uw3-dew-training.tar \
        --prefix uw3.dew \
        --test uw3/uw3-dew-testing.tar --display \
        --model ${mdef:-models/linelstm.py}"$@"
}


cmd_uw3rawline() {  # train on raw lines (uw3-rawlines)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    python3 -m ocrlib.ocroline train 'uw3/uw3-rawlines-{000000..000020}.tar' \
        --prefix uw3.rawdw \
        --mdef ${mdef:-models/linelstm.py} \
        --dewarp-to 48 \
        --schedule 1e-4 \
        --test uw3/uw3-rawlines-000021.tar --invert --display "$@"
}


cmd_uw3words() {  # train on extracted words (uw3-lwords)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    python3 -m ocrlib.ocroline train 'uw3/uw3-lwords-{000000..000013}.tar' \
        --prefix uw3.words \
        --mdef ${mdef:-models/linelstm.py} \
        --dewarp-to 48 \
        --test uw3/uw3-lwords-000014.tar --display "$@"
}


###
# segmentation
###


cmd_uw3wseg() {  # train a word segmenter (uw3-wordseg-markers-masked-patches)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    train=uw3/uw3-wordseg-markers-masked-patches-{000000..000009}.tar
    test=uw3/uw3-wordseg-markers-masked-patches-000010.tar
    mdef=models/seglstm.py
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    python3 -m ocrlib.ocroseg train $train \
        --prefix=uw3.wseg \
        --mdef=models/seglstm.py \
        --augmentation=gray \
        --test $test --mdef $mdef --training-bs 2 --display "$@"
}

cmd_uw3wwseg() {  # train a word segmenter (uw3-wordseg-markers-masked-patches)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    train=uw3/uw3-wordseg-markers-masked-patches-{000000..000009}.tar
    test=uw3/uw3-wordseg-markers-masked-patches-000010.tar
    mdef=models/seglstm.py
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    python3 -m ocrlib.ocroseg train $train \
        --prefix=uw3.wwseg \
        --mdef=models/seglstm.py \
        --weightmask=50 \
        --augmentation=gray \
        --test $test --mdef $mdef --training-bs 2 --display "$@"
}

cmd_uw3lseg() {  # train a line segmenter (uw3-lineseg-markers-patches)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    train=uw3/uw3-lineseg-markers-patches-{000000..000009}.tar
    test=uw3/uw3-lineseg-markers-patches-000010.tar
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    python3 -m ocrlib.ocroseg train $train \
        --prefix=uw3.lseg \
        --mdef=models/seglstm.py \
        --augmentation=page \
        --test $test --training-bs 2 --display "$@"
}

cmd_uw3wlseg() {  # train a line segmenter (uw3-lineseg-markers-patches)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    train=uw3/uw3-lineseg-markers-patches-{000000..000009}.tar
    test=uw3/uw3-lineseg-markers-patches-000010.tar
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    python3 -m ocrlib.ocroseg train $train \
        --weightmask=50 \
        --mdef=models/seglstm.py \
        --prefix=uw3.wlseg \
        --augmentation=page \
        --test $test --training-bs 2 --display "$@"
}

cmd_uw3zones() {  # train a block segmenter (uw3-zoneseg)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    train=uw3/uw3-zoneseg.tar
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    set -x
    python3 -m ocrlib.ocroseg train $train \
        --prefix=uw3.zones \
        --training-bs 1 \
        --augmentation=page \
        --mdef models/seglstm_light3.py \
        --extensions 'page.png boundaries.png' \
        --epochs 10000 \
        --schedule '1e-4' \
        --display \
        "$@"
}

cmd_uw3wzones() {  # train a block segmenter (uw3-zoneseg)
    set -e
    # cmd_venv > venv.log
    source venv/bin/activate
    train=uw3/uw3-zoneseg.tar
    export CUDA_VISIBLE_DEVICES=0  # LSTM does not work with DataParallel
    python3 -m ocrlib.ocroseg train $train \
        --prefix=uw3.wzones \
        --weightmask 100 \
        --training-bs 1 \
        --augmentation=page \
        --mdef models/seglstm_light3.py \
        --extensions 'page.png boundaries.png' \
        --epochs 10000 \
        --schedule '1e-4' \
        --display \
        "$@"
}

cmd_lab() { # run jupyter lab in the environment
    set -e
    cmd_venv > venv.log
    source venv/bin/activate
    jupyter lab "$@"
}

cmd_help() { # help message
echo
echo available commands:
echo
grep '^cmd_[_0-9a-z]*() {' $0 | sed 's/cmd_//;s/\(.*\)() *{* *#* */\1 -- /'
}

cmd=${1:-help}
shift
case $cmd in
help)
    echo; echo available commands:; echo
    grep '^cmd_[_0-9a-z]*() {' "$0" | sed 's/cmd_//;s/\(.*\)() *{* *#* */\1 -- /'
    ;;
*.py)
    # cmd_versions
    set -e
    # hg status grep -v '^M ' > /dev/null
    cmd_venv > venv.log
    source venv/bin/activate
    export OMP_NUM_THREADS=1
    python3 "$cmd" "$@"
    ;;
*)
    set -e
    "cmd_$cmd" "$@"
    ;;
esac

